// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class EpochRedeemed extends ethereum.Event {
  get params(): EpochRedeemed__Params {
    return new EpochRedeemed__Params(this);
  }
}

export class EpochRedeemed__Params {
  _event: EpochRedeemed;

  constructor(event: EpochRedeemed) {
    this._event = event;
  }

  get wrappedSong(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get holder(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get epochId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NewDistributionChunk extends ethereum.Event {
  get params(): NewDistributionChunk__Params {
    return new NewDistributionChunk__Params(this);
  }
}

export class NewDistributionChunk__Params {
  _event: NewDistributionChunk;

  constructor(event: NewDistributionChunk) {
    this._event = event;
  }

  get epochId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get chunkIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amountsCount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NewRevenueEpoch extends ethereum.Event {
  get params(): NewRevenueEpoch__Params {
    return new NewRevenueEpoch__Params(this);
  }
}

export class NewRevenueEpoch__Params {
  _event: NewRevenueEpoch;

  constructor(event: NewRevenueEpoch) {
    this._event = event;
  }

  get distributor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get epochId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class WrappedSongAcceptedForReview extends ethereum.Event {
  get params(): WrappedSongAcceptedForReview__Params {
    return new WrappedSongAcceptedForReview__Params(this);
  }
}

export class WrappedSongAcceptedForReview__Params {
  _event: WrappedSongAcceptedForReview;

  constructor(event: WrappedSongAcceptedForReview) {
    this._event = event;
  }

  get wrappedSong(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class WrappedSongReleaseRejected extends ethereum.Event {
  get params(): WrappedSongReleaseRejected__Params {
    return new WrappedSongReleaseRejected__Params(this);
  }
}

export class WrappedSongReleaseRejected__Params {
  _event: WrappedSongReleaseRejected;

  constructor(event: WrappedSongReleaseRejected) {
    this._event = event;
  }

  get wrappedSong(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class WrappedSongReleased extends ethereum.Event {
  get params(): WrappedSongReleased__Params {
    return new WrappedSongReleased__Params(this);
  }
}

export class WrappedSongReleased__Params {
  _event: WrappedSongReleased;

  constructor(event: WrappedSongReleased) {
    this._event = event;
  }

  get wrappedSong(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DistributorWallet__distributionEpochsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getTotalAmount(): BigInt {
    return this.value0;
  }

  getTimestamp(): BigInt {
    return this.value1;
  }

  getChunksCount(): BigInt {
    return this.value2;
  }
}

export class DistributorWallet extends ethereum.SmartContract {
  static bind(address: Address): DistributorWallet {
    return new DistributorWallet("DistributorWallet", address);
  }

  CHUNK_SIZE(): BigInt {
    let result = super.call("CHUNK_SIZE", "CHUNK_SIZE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_CHUNK_SIZE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("CHUNK_SIZE", "CHUNK_SIZE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  amountChunks(param0: BigInt, param1: BigInt, param2: BigInt): BigInt {
    let result = super.call(
      "amountChunks",
      "amountChunks(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
      ],
    );

    return result[0].toBigInt();
  }

  try_amountChunks(
    param0: BigInt,
    param1: BigInt,
    param2: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "amountChunks",
      "amountChunks(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentEpochId(): BigInt {
    let result = super.call("currentEpochId", "currentEpochId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_currentEpochId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentEpochId",
      "currentEpochId():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  distributionEpochs(
    param0: BigInt,
  ): DistributorWallet__distributionEpochsResult {
    let result = super.call(
      "distributionEpochs",
      "distributionEpochs(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new DistributorWallet__distributionEpochsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    );
  }

  try_distributionEpochs(
    param0: BigInt,
  ): ethereum.CallResult<DistributorWallet__distributionEpochsResult> {
    let result = super.tryCall(
      "distributionEpochs",
      "distributionEpochs(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DistributorWallet__distributionEpochsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    );
  }

  epochClaims(param0: BigInt, param1: Address, param2: Address): boolean {
    let result = super.call(
      "epochClaims",
      "epochClaims(uint256,address,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromAddress(param2),
      ],
    );

    return result[0].toBoolean();
  }

  try_epochClaims(
    param0: BigInt,
    param1: Address,
    param2: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "epochClaims",
      "epochClaims(uint256,address,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromAddress(param2),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getAmountForWS(epochId: BigInt, wsIndex: BigInt): BigInt {
    let result = super.call(
      "getAmountForWS",
      "getAmountForWS(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(epochId),
        ethereum.Value.fromUnsignedBigInt(wsIndex),
      ],
    );

    return result[0].toBigInt();
  }

  try_getAmountForWS(
    epochId: BigInt,
    wsIndex: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAmountForWS",
      "getAmountForWS(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(epochId),
        ethereum.Value.fromUnsignedBigInt(wsIndex),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getClaimableAmount(
    _wrappedSong: Address,
    _holder: Address,
    epochId: BigInt,
  ): BigInt {
    let result = super.call(
      "getClaimableAmount",
      "getClaimableAmount(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_wrappedSong),
        ethereum.Value.fromAddress(_holder),
        ethereum.Value.fromUnsignedBigInt(epochId),
      ],
    );

    return result[0].toBigInt();
  }

  try_getClaimableAmount(
    _wrappedSong: Address,
    _holder: Address,
    epochId: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getClaimableAmount",
      "getClaimableAmount(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_wrappedSong),
        ethereum.Value.fromAddress(_holder),
        ethereum.Value.fromUnsignedBigInt(epochId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getManagedWrappedSongsCount(): BigInt {
    let result = super.call(
      "getManagedWrappedSongsCount",
      "getManagedWrappedSongsCount():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getManagedWrappedSongsCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getManagedWrappedSongsCount",
      "getManagedWrappedSongsCount():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMultipleClaimableAmounts(
    _wrappedSong: Address,
    _holder: Address,
    epochIds: Array<BigInt>,
  ): Array<BigInt> {
    let result = super.call(
      "getMultipleClaimableAmounts",
      "getMultipleClaimableAmounts(address,address,uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddress(_wrappedSong),
        ethereum.Value.fromAddress(_holder),
        ethereum.Value.fromUnsignedBigIntArray(epochIds),
      ],
    );

    return result[0].toBigIntArray();
  }

  try_getMultipleClaimableAmounts(
    _wrappedSong: Address,
    _holder: Address,
    epochIds: Array<BigInt>,
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getMultipleClaimableAmounts",
      "getMultipleClaimableAmounts(address,address,uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddress(_wrappedSong),
        ethereum.Value.fromAddress(_holder),
        ethereum.Value.fromUnsignedBigIntArray(epochIds),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  managedWrappedSongs(param0: BigInt): Address {
    let result = super.call(
      "managedWrappedSongs",
      "managedWrappedSongs(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toAddress();
  }

  try_managedWrappedSongs(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "managedWrappedSongs",
      "managedWrappedSongs(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  protocolModule(): Address {
    let result = super.call("protocolModule", "protocolModule():(address)", []);

    return result[0].toAddress();
  }

  try_protocolModule(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "protocolModule",
      "protocolModule():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stablecoin(): Address {
    let result = super.call("stablecoin", "stablecoin():(address)", []);

    return result[0].toAddress();
  }

  try_stablecoin(): ethereum.CallResult<Address> {
    let result = super.tryCall("stablecoin", "stablecoin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  wsRedeemIndexList(param0: Address): BigInt {
    let result = super.call(
      "wsRedeemIndexList",
      "wsRedeemIndexList(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_wsRedeemIndexList(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "wsRedeemIndexList",
      "wsRedeemIndexList(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _stablecoin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _protocolModule(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptWrappedSongForReviewCall extends ethereum.Call {
  get inputs(): AcceptWrappedSongForReviewCall__Inputs {
    return new AcceptWrappedSongForReviewCall__Inputs(this);
  }

  get outputs(): AcceptWrappedSongForReviewCall__Outputs {
    return new AcceptWrappedSongForReviewCall__Outputs(this);
  }
}

export class AcceptWrappedSongForReviewCall__Inputs {
  _call: AcceptWrappedSongForReviewCall;

  constructor(call: AcceptWrappedSongForReviewCall) {
    this._call = call;
  }

  get wrappedSong(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AcceptWrappedSongForReviewCall__Outputs {
  _call: AcceptWrappedSongForReviewCall;

  constructor(call: AcceptWrappedSongForReviewCall) {
    this._call = call;
  }
}

export class ClaimEpochEarningsCall extends ethereum.Call {
  get inputs(): ClaimEpochEarningsCall__Inputs {
    return new ClaimEpochEarningsCall__Inputs(this);
  }

  get outputs(): ClaimEpochEarningsCall__Outputs {
    return new ClaimEpochEarningsCall__Outputs(this);
  }
}

export class ClaimEpochEarningsCall__Inputs {
  _call: ClaimEpochEarningsCall;

  constructor(call: ClaimEpochEarningsCall) {
    this._call = call;
  }

  get _wrappedSong(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get epochId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ClaimEpochEarningsCall__Outputs {
  _call: ClaimEpochEarningsCall;

  constructor(call: ClaimEpochEarningsCall) {
    this._call = call;
  }
}

export class ClaimMultipleEpochsCall extends ethereum.Call {
  get inputs(): ClaimMultipleEpochsCall__Inputs {
    return new ClaimMultipleEpochsCall__Inputs(this);
  }

  get outputs(): ClaimMultipleEpochsCall__Outputs {
    return new ClaimMultipleEpochsCall__Outputs(this);
  }
}

export class ClaimMultipleEpochsCall__Inputs {
  _call: ClaimMultipleEpochsCall;

  constructor(call: ClaimMultipleEpochsCall) {
    this._call = call;
  }

  get _wrappedSong(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get epochIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class ClaimMultipleEpochsCall__Outputs {
  _call: ClaimMultipleEpochsCall;

  constructor(call: ClaimMultipleEpochsCall) {
    this._call = call;
  }
}

export class ClaimMultipleWrappedSongsEarningsCall extends ethereum.Call {
  get inputs(): ClaimMultipleWrappedSongsEarningsCall__Inputs {
    return new ClaimMultipleWrappedSongsEarningsCall__Inputs(this);
  }

  get outputs(): ClaimMultipleWrappedSongsEarningsCall__Outputs {
    return new ClaimMultipleWrappedSongsEarningsCall__Outputs(this);
  }
}

export class ClaimMultipleWrappedSongsEarningsCall__Inputs {
  _call: ClaimMultipleWrappedSongsEarningsCall;

  constructor(call: ClaimMultipleWrappedSongsEarningsCall) {
    this._call = call;
  }

  get _wrappedSongs(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get epochId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ClaimMultipleWrappedSongsEarningsCall__Outputs {
  _call: ClaimMultipleWrappedSongsEarningsCall;

  constructor(call: ClaimMultipleWrappedSongsEarningsCall) {
    this._call = call;
  }
}

export class ConfirmMetadataUpdateCall extends ethereum.Call {
  get inputs(): ConfirmMetadataUpdateCall__Inputs {
    return new ConfirmMetadataUpdateCall__Inputs(this);
  }

  get outputs(): ConfirmMetadataUpdateCall__Outputs {
    return new ConfirmMetadataUpdateCall__Outputs(this);
  }
}

export class ConfirmMetadataUpdateCall__Inputs {
  _call: ConfirmMetadataUpdateCall;

  constructor(call: ConfirmMetadataUpdateCall) {
    this._call = call;
  }

  get wrappedSong(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConfirmMetadataUpdateCall__Outputs {
  _call: ConfirmMetadataUpdateCall;

  constructor(call: ConfirmMetadataUpdateCall) {
    this._call = call;
  }
}

export class ConfirmWrappedSongReleaseCall extends ethereum.Call {
  get inputs(): ConfirmWrappedSongReleaseCall__Inputs {
    return new ConfirmWrappedSongReleaseCall__Inputs(this);
  }

  get outputs(): ConfirmWrappedSongReleaseCall__Outputs {
    return new ConfirmWrappedSongReleaseCall__Outputs(this);
  }
}

export class ConfirmWrappedSongReleaseCall__Inputs {
  _call: ConfirmWrappedSongReleaseCall;

  constructor(call: ConfirmWrappedSongReleaseCall) {
    this._call = call;
  }

  get wrappedSong(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConfirmWrappedSongReleaseCall__Outputs {
  _call: ConfirmWrappedSongReleaseCall;

  constructor(call: ConfirmWrappedSongReleaseCall) {
    this._call = call;
  }
}

export class CreateDistributionEpochChunkCall extends ethereum.Call {
  get inputs(): CreateDistributionEpochChunkCall__Inputs {
    return new CreateDistributionEpochChunkCall__Inputs(this);
  }

  get outputs(): CreateDistributionEpochChunkCall__Outputs {
    return new CreateDistributionEpochChunkCall__Outputs(this);
  }
}

export class CreateDistributionEpochChunkCall__Inputs {
  _call: CreateDistributionEpochChunkCall;

  constructor(call: CreateDistributionEpochChunkCall) {
    this._call = call;
  }

  get epochId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get chunkIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _totalAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get isFirstChunk(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }

  get isLastChunk(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }
}

export class CreateDistributionEpochChunkCall__Outputs {
  _call: CreateDistributionEpochChunkCall;

  constructor(call: CreateDistributionEpochChunkCall) {
    this._call = call;
  }
}

export class RecoverTokensCall extends ethereum.Call {
  get inputs(): RecoverTokensCall__Inputs {
    return new RecoverTokensCall__Inputs(this);
  }

  get outputs(): RecoverTokensCall__Outputs {
    return new RecoverTokensCall__Outputs(this);
  }
}

export class RecoverTokensCall__Inputs {
  _call: RecoverTokensCall;

  constructor(call: RecoverTokensCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RecoverTokensCall__Outputs {
  _call: RecoverTokensCall;

  constructor(call: RecoverTokensCall) {
    this._call = call;
  }
}

export class RejectMetadataUpdateCall extends ethereum.Call {
  get inputs(): RejectMetadataUpdateCall__Inputs {
    return new RejectMetadataUpdateCall__Inputs(this);
  }

  get outputs(): RejectMetadataUpdateCall__Outputs {
    return new RejectMetadataUpdateCall__Outputs(this);
  }
}

export class RejectMetadataUpdateCall__Inputs {
  _call: RejectMetadataUpdateCall;

  constructor(call: RejectMetadataUpdateCall) {
    this._call = call;
  }

  get wrappedSong(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RejectMetadataUpdateCall__Outputs {
  _call: RejectMetadataUpdateCall;

  constructor(call: RejectMetadataUpdateCall) {
    this._call = call;
  }
}

export class RejectWrappedSongReleaseCall extends ethereum.Call {
  get inputs(): RejectWrappedSongReleaseCall__Inputs {
    return new RejectWrappedSongReleaseCall__Inputs(this);
  }

  get outputs(): RejectWrappedSongReleaseCall__Outputs {
    return new RejectWrappedSongReleaseCall__Outputs(this);
  }
}

export class RejectWrappedSongReleaseCall__Inputs {
  _call: RejectWrappedSongReleaseCall;

  constructor(call: RejectWrappedSongReleaseCall) {
    this._call = call;
  }

  get wrappedSong(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RejectWrappedSongReleaseCall__Outputs {
  _call: RejectWrappedSongReleaseCall;

  constructor(call: RejectWrappedSongReleaseCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetWrappedSongAuthenticityCall extends ethereum.Call {
  get inputs(): SetWrappedSongAuthenticityCall__Inputs {
    return new SetWrappedSongAuthenticityCall__Inputs(this);
  }

  get outputs(): SetWrappedSongAuthenticityCall__Outputs {
    return new SetWrappedSongAuthenticityCall__Outputs(this);
  }
}

export class SetWrappedSongAuthenticityCall__Inputs {
  _call: SetWrappedSongAuthenticityCall;

  constructor(call: SetWrappedSongAuthenticityCall) {
    this._call = call;
  }

  get wrappedSong(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get isAuthentic(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetWrappedSongAuthenticityCall__Outputs {
  _call: SetWrappedSongAuthenticityCall;

  constructor(call: SetWrappedSongAuthenticityCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
